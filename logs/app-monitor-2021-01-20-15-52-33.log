Starting 'main' function on: ip-172-31-13-26.eu-west-1.compute.internal
From github.com:just-another-dude/web-application
 * branch            HEAD       -> FETCH_HEAD
Already up to date.
Local repository updated!

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
[0m
Terraform will perform the following actions:

[1m  # docker_container.haproxy[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "docker_container" "haproxy" {
      [32m+[0m [0m[1m[0mattach[0m[0m           = false
      [32m+[0m [0m[1m[0mbridge[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mcommand[0m[0m          = [
          [32m+[0m [0m"bash",
          [32m+[0m [0m"/usr/local/etc/haproxy/haproxy-health-display.sh",
        ]
      [32m+[0m [0m[1m[0mcontainer_logs[0m[0m   = (known after apply)
      [32m+[0m [0m[1m[0mentrypoint[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0menv[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mexit_code[0m[0m        = (known after apply)
      [32m+[0m [0m[1m[0mgateway[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mhostname[0m[0m         = "haproxy"
      [32m+[0m [0m[1m[0mid[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mimage[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0minit[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mip_address[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mip_prefix_length[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mipc_mode[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mlog_driver[0m[0m       = "json-file"
      [32m+[0m [0m[1m[0mlogs[0m[0m             = false
      [32m+[0m [0m[1m[0mmust_run[0m[0m         = true
      [32m+[0m [0m[1m[0mname[0m[0m             = "haproxy"
      [32m+[0m [0m[1m[0mnetwork_data[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mread_only[0m[0m        = false
      [32m+[0m [0m[1m[0mremove_volumes[0m[0m   = true
      [32m+[0m [0m[1m[0mrestart[0m[0m          = "no"
      [32m+[0m [0m[1m[0mrm[0m[0m               = false
      [32m+[0m [0m[1m[0msecurity_opts[0m[0m    = (known after apply)
      [32m+[0m [0m[1m[0mshm_size[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mstart[0m[0m            = true

      [32m+[0m [0mhealthcheck {
          [32m+[0m [0m[1m[0minterval[0m[0m     = (known after apply)
          [32m+[0m [0m[1m[0mretries[0m[0m      = (known after apply)
          [32m+[0m [0m[1m[0mstart_period[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mtest[0m[0m         = (known after apply)
          [32m+[0m [0m[1m[0mtimeout[0m[0m      = (known after apply)
        }

      [32m+[0m [0mlabels {
          [32m+[0m [0m[1m[0mlabel[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mvalue[0m[0m = (known after apply)
        }

      [32m+[0m [0mmounts {
          [32m+[0m [0m[1m[0msource[0m[0m = "/home/michael/web-application/terraform/files/haproxy-health-display.sh"
          [32m+[0m [0m[1m[0mtarget[0m[0m = "/usr/local/etc/haproxy/haproxy-health-display.sh"
          [32m+[0m [0m[1m[0mtype[0m[0m   = "bind"
        }
      [32m+[0m [0mmounts {
          [32m+[0m [0m[1m[0msource[0m[0m = "/home/michael/web-application/terraform/files/haproxy.cfg"
          [32m+[0m [0m[1m[0mtarget[0m[0m = "/usr/local/etc/haproxy/haproxy.cfg"
          [32m+[0m [0m[1m[0mtype[0m[0m   = "bind"
        }

      [32m+[0m [0mnetworks_advanced {
          [32m+[0m [0m[1m[0maliases[0m[0m = []
          [32m+[0m [0m[1m[0mname[0m[0m    = "private_docker_network"
        }

      [32m+[0m [0mports {
          [32m+[0m [0m[1m[0mexternal[0m[0m = 42069
          [32m+[0m [0m[1m[0minternal[0m[0m = 80
          [32m+[0m [0m[1m[0mip[0m[0m       = "0.0.0.0"
          [32m+[0m [0m[1m[0mprotocol[0m[0m = "tcp"
        }
    }

[1m  # docker_container.tomcat[0][0m will be created[0m[0m
[0m  [32m+[0m[0m resource "docker_container" "tomcat" {
      [32m+[0m [0m[1m[0mattach[0m[0m           = false
      [32m+[0m [0m[1m[0mbridge[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mcommand[0m[0m          = [
          [32m+[0m [0m"bash",
          [32m+[0m [0m"/usr/local/tomcat/tomcat-display-page.sh",
        ]
      [32m+[0m [0m[1m[0mcontainer_logs[0m[0m   = (known after apply)
      [32m+[0m [0m[1m[0mentrypoint[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0menv[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mexit_code[0m[0m        = (known after apply)
      [32m+[0m [0m[1m[0mgateway[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mhostname[0m[0m         = "tomcat-0"
      [32m+[0m [0m[1m[0mid[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mimage[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0minit[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mip_address[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mip_prefix_length[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mipc_mode[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mlog_driver[0m[0m       = "json-file"
      [32m+[0m [0m[1m[0mlogs[0m[0m             = false
      [32m+[0m [0m[1m[0mmust_run[0m[0m         = true
      [32m+[0m [0m[1m[0mname[0m[0m             = "tomcat-0"
      [32m+[0m [0m[1m[0mnetwork_data[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mread_only[0m[0m        = false
      [32m+[0m [0m[1m[0mremove_volumes[0m[0m   = true
      [32m+[0m [0m[1m[0mrestart[0m[0m          = "no"
      [32m+[0m [0m[1m[0mrm[0m[0m               = false
      [32m+[0m [0m[1m[0msecurity_opts[0m[0m    = (known after apply)
      [32m+[0m [0m[1m[0mshm_size[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mstart[0m[0m            = true

      [32m+[0m [0mhealthcheck {
          [32m+[0m [0m[1m[0minterval[0m[0m     = (known after apply)
          [32m+[0m [0m[1m[0mretries[0m[0m      = (known after apply)
          [32m+[0m [0m[1m[0mstart_period[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mtest[0m[0m         = (known after apply)
          [32m+[0m [0m[1m[0mtimeout[0m[0m      = (known after apply)
        }

      [32m+[0m [0mlabels {
          [32m+[0m [0m[1m[0mlabel[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mvalue[0m[0m = (known after apply)
        }

      [32m+[0m [0mmounts {
          [32m+[0m [0m[1m[0msource[0m[0m = "/home/michael/web-application/terraform/files/tomcat-display-page.sh"
          [32m+[0m [0m[1m[0mtarget[0m[0m = "/usr/local/tomcat/tomcat-display-page.sh"
          [32m+[0m [0m[1m[0mtype[0m[0m   = "bind"
        }

      [32m+[0m [0mnetworks_advanced {
          [32m+[0m [0m[1m[0maliases[0m[0m = []
          [32m+[0m [0m[1m[0mname[0m[0m    = "private_docker_network"
        }
    }

[1m  # docker_container.tomcat[1][0m will be created[0m[0m
[0m  [32m+[0m[0m resource "docker_container" "tomcat" {
      [32m+[0m [0m[1m[0mattach[0m[0m           = false
      [32m+[0m [0m[1m[0mbridge[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mcommand[0m[0m          = [
          [32m+[0m [0m"bash",
          [32m+[0m [0m"/usr/local/tomcat/tomcat-display-page.sh",
        ]
      [32m+[0m [0m[1m[0mcontainer_logs[0m[0m   = (known after apply)
      [32m+[0m [0m[1m[0mentrypoint[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0menv[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mexit_code[0m[0m        = (known after apply)
      [32m+[0m [0m[1m[0mgateway[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mhostname[0m[0m         = "tomcat-1"
      [32m+[0m [0m[1m[0mid[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mimage[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0minit[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mip_address[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mip_prefix_length[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mipc_mode[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mlog_driver[0m[0m       = "json-file"
      [32m+[0m [0m[1m[0mlogs[0m[0m             = false
      [32m+[0m [0m[1m[0mmust_run[0m[0m         = true
      [32m+[0m [0m[1m[0mname[0m[0m             = "tomcat-1"
      [32m+[0m [0m[1m[0mnetwork_data[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mread_only[0m[0m        = false
      [32m+[0m [0m[1m[0mremove_volumes[0m[0m   = true
      [32m+[0m [0m[1m[0mrestart[0m[0m          = "no"
      [32m+[0m [0m[1m[0mrm[0m[0m               = false
      [32m+[0m [0m[1m[0msecurity_opts[0m[0m    = (known after apply)
      [32m+[0m [0m[1m[0mshm_size[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mstart[0m[0m            = true

      [32m+[0m [0mhealthcheck {
          [32m+[0m [0m[1m[0minterval[0m[0m     = (known after apply)
          [32m+[0m [0m[1m[0mretries[0m[0m      = (known after apply)
          [32m+[0m [0m[1m[0mstart_period[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mtest[0m[0m         = (known after apply)
          [32m+[0m [0m[1m[0mtimeout[0m[0m      = (known after apply)
        }

      [32m+[0m [0mlabels {
          [32m+[0m [0m[1m[0mlabel[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mvalue[0m[0m = (known after apply)
        }

      [32m+[0m [0mmounts {
          [32m+[0m [0m[1m[0msource[0m[0m = "/home/michael/web-application/terraform/files/tomcat-display-page.sh"
          [32m+[0m [0m[1m[0mtarget[0m[0m = "/usr/local/tomcat/tomcat-display-page.sh"
          [32m+[0m [0m[1m[0mtype[0m[0m   = "bind"
        }

      [32m+[0m [0mnetworks_advanced {
          [32m+[0m [0m[1m[0maliases[0m[0m = []
          [32m+[0m [0m[1m[0mname[0m[0m    = "private_docker_network"
        }
    }

[1m  # docker_container.tomcat[2][0m will be created[0m[0m
[0m  [32m+[0m[0m resource "docker_container" "tomcat" {
      [32m+[0m [0m[1m[0mattach[0m[0m           = false
      [32m+[0m [0m[1m[0mbridge[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mcommand[0m[0m          = [
          [32m+[0m [0m"bash",
          [32m+[0m [0m"/usr/local/tomcat/tomcat-display-page.sh",
        ]
      [32m+[0m [0m[1m[0mcontainer_logs[0m[0m   = (known after apply)
      [32m+[0m [0m[1m[0mentrypoint[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0menv[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mexit_code[0m[0m        = (known after apply)
      [32m+[0m [0m[1m[0mgateway[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mhostname[0m[0m         = "tomcat-2"
      [32m+[0m [0m[1m[0mid[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mimage[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0minit[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mip_address[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mip_prefix_length[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mipc_mode[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mlog_driver[0m[0m       = "json-file"
      [32m+[0m [0m[1m[0mlogs[0m[0m             = false
      [32m+[0m [0m[1m[0mmust_run[0m[0m         = true
      [32m+[0m [0m[1m[0mname[0m[0m             = "tomcat-2"
      [32m+[0m [0m[1m[0mnetwork_data[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mread_only[0m[0m        = false
      [32m+[0m [0m[1m[0mremove_volumes[0m[0m   = true
      [32m+[0m [0m[1m[0mrestart[0m[0m          = "no"
      [32m+[0m [0m[1m[0mrm[0m[0m               = false
      [32m+[0m [0m[1m[0msecurity_opts[0m[0m    = (known after apply)
      [32m+[0m [0m[1m[0mshm_size[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mstart[0m[0m            = true

      [32m+[0m [0mhealthcheck {
          [32m+[0m [0m[1m[0minterval[0m[0m     = (known after apply)
          [32m+[0m [0m[1m[0mretries[0m[0m      = (known after apply)
          [32m+[0m [0m[1m[0mstart_period[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mtest[0m[0m         = (known after apply)
          [32m+[0m [0m[1m[0mtimeout[0m[0m      = (known after apply)
        }

      [32m+[0m [0mlabels {
          [32m+[0m [0m[1m[0mlabel[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mvalue[0m[0m = (known after apply)
        }

      [32m+[0m [0mmounts {
          [32m+[0m [0m[1m[0msource[0m[0m = "/home/michael/web-application/terraform/files/tomcat-display-page.sh"
          [32m+[0m [0m[1m[0mtarget[0m[0m = "/usr/local/tomcat/tomcat-display-page.sh"
          [32m+[0m [0m[1m[0mtype[0m[0m   = "bind"
        }

      [32m+[0m [0mnetworks_advanced {
          [32m+[0m [0m[1m[0maliases[0m[0m = []
          [32m+[0m [0m[1m[0mname[0m[0m    = "private_docker_network"
        }
    }

[1m  # docker_image.haproxy_image[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "docker_image" "haproxy_image" {
      [32m+[0m [0m[1m[0mid[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mkeep_locally[0m[0m = true
      [32m+[0m [0m[1m[0mlatest[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m         = "haproxy:alpine"
      [32m+[0m [0m[1m[0moutput[0m[0m       = (known after apply)
    }

[1m  # docker_image.tomcat_image[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "docker_image" "tomcat_image" {
      [32m+[0m [0m[1m[0mid[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mkeep_locally[0m[0m = true
      [32m+[0m [0m[1m[0mlatest[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m         = "tomcat:latest"
      [32m+[0m [0m[1m[0moutput[0m[0m       = (known after apply)
    }

[1m  # docker_network.private_docker_network[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "docker_network" "private_docker_network" {
      [32m+[0m [0m[1m[0mdriver[0m[0m      = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0minternal[0m[0m    = (known after apply)
      [32m+[0m [0m[1m[0mipam_driver[0m[0m = "default"
      [32m+[0m [0m[1m[0mname[0m[0m        = "private_docker_network"
      [32m+[0m [0m[1m[0moptions[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mscope[0m[0m       = (known after apply)

      [32m+[0m [0mipam_config {
          [32m+[0m [0m[1m[0maux_address[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mgateway[0m[0m     = (known after apply)
          [32m+[0m [0m[1m[0mip_range[0m[0m    = (known after apply)
          [32m+[0m [0m[1m[0msubnet[0m[0m      = (known after apply)
        }
    }

[0m[1mPlan:[0m 7 to add, 0 to change, 0 to destroy.[0m
[33m
[1m[33mWarning: [0m[0m[1mInterpolation-only expressions are deprecated[0m

[0m  on main.tf line 28, in resource "docker_image" "tomcat_image":
  28:   name = [4m"${var.tomcat_image_version}"[0m
[0m
Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

(and one more similar warning elsewhere)
[0m[0m

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

Application ready to run!
Tomcat container image: tomcat:latest
HAProxy container image: haproxy:alpine
[0m[1mdocker_image.haproxy_image: Creating...[0m[0m
[0m[1mdocker_network.private_docker_network: Creating...[0m[0m
[0m[1mdocker_image.tomcat_image: Creating...[0m[0m
[0m[1mdocker_image.haproxy_image: Creation complete after 0s [id=sha256:a50e058f859a900e3cc2c1f69c651a7e85f877175bc2561880232cbce5db7d85haproxy:alpine][0m[0m
[0m[1mdocker_image.tomcat_image: Creation complete after 0s [id=sha256:040bdb29ab375db2a8de090070dcbee19d43f609385a934c3f2b423e515f57bbtomcat:latest][0m[0m
[0m[1mdocker_container.haproxy: Creating...[0m[0m
[0m[1mdocker_container.tomcat[2]: Creating...[0m[0m
[0m[1mdocker_container.tomcat[1]: Creating...[0m[0m
[0m[1mdocker_container.tomcat[0]: Creating...[0m[0m
[0m[1mdocker_network.private_docker_network: Creation complete after 2s [id=8032f11aadf38791050ecafc30858cd73bdd74b1280b94efe405d5e2d90b4fc0][0m[0m
[0m[1mdocker_container.tomcat[1]: Creation complete after 2s [id=b020cf1fc479a2f1a0065289b522817cd15e2be25daab80b5f7c47b0378f69ce][0m[0m
[0m[1mdocker_container.tomcat[2]: Creation complete after 2s [id=f5bcd986d0a01919563ef3fb47f2421673a7f2a61492bff42be3d8d6443fa6c9][0m[0m
[0m[1mdocker_container.haproxy: Creation complete after 3s [id=feed4f60ed8d5c40318abe6fb3de52904d9e9f6ecff6fbc588101a35f577df10][0m[0m
[0m[1mdocker_container.tomcat[0]: Creation complete after 3s [id=6a32d08b598a0748dd39ade8dee4113c106811df1e87b57dad03c8412b1a5df9][0m[0m
[33m
[1m[33mWarning: [0m[0m[1mInterpolation-only expressions are deprecated[0m

[0m  on main.tf line 28, in resource "docker_image" "tomcat_image":
  28:   name = [4m"${var.tomcat_image_version}"[0m
[0m
Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

(and one more similar warning elsewhere)
[0m[0m
[0m[1m[32m
Apply complete! Resources: 7 added, 0 changed, 0 destroyed.[0m
Application started successfully!
Function 'run_application' finished successfully!
